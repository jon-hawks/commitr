################################################################################
# This pipeline validates that the code builds, is linted properly, passes     #
# unit tests, and passes a security audit.                                     #
################################################################################
name: default

on:
  push:

# Environment variables.
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1
  GKE_CLUSTER: default
  GKE_ZONE: us-central1-a
  DEPLOYMENT_NAME: default
  REPOSITORY: default
  IMAGE: default

# Pipeline.
jobs:

  # Verification stage.
  verify:
    runs-on: ubuntu-latest
    steps:

    # Checkout this repository. Note: this should likely always come first.
    - name: Checkout Repository
      uses: actions/checkout@main
      with:
        # Pull faster.
        fetch-depth: 0

    # Install and run a linter.
    - name: Lint
      run: |-
        shellcheck commit.sh

  # Build and deploy this code (e.g. to a Kubernetes cluster).
  deploy:
    environment: production
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:

    # Checkout this repository. Note: this should likely always come first.
    - name: Checkout Repository
      uses: actions/checkout@main
      with:
        # Pull faster.
        fetch-depth: 0

    # Configure a Workload Identity federation for Google Cloud and generate an access token.
    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@main
      with:
        token_format: access_token
        workload_identity_provider: projects/921831209165/locations/global/workloadIdentityPools/default/providers/default
        service_account: default@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

    # Configure Docker to use our OAuth 2.0 access token.
    - name: Configure Docker
      run: |-
        echo ${{ steps.auth.outputs.access_token }} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

    # Get the GKE credentials so we can deploy to the cluster.
    - name: Setup GKE credentials
      uses: google-github-actions/get-gke-credentials@main
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Build the Docker image.
    - name: Build
      run: |-
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Artifact Registry.
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

    # Deploy the Docker image to the GKE cluster.
    - name: Deploy
      run: |-
        # replacing the image name in the k8s template
         kubectl create deployment $DEPLOYMENT_NAME \
           --image="$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
           -o yaml \
           --dry-run=client \
        | kubectl apply -f -
